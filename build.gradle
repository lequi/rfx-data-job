group 'rfx-data-job'
version '1.0'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'

sourceCompatibility = 1.8

repositories {    
    mavenCentral()
    mavenLocal()
    maven {
      url = "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

tasks.withType(Jar) {
	destinationDir = file("$rootDir/BUILD-OUTPUT")
}

dependencies {
	//common libs for AOP and Spring core
  	compile (
            fileTree(dir: 'lib', include: '**/*.jar')
            ,'javax.inject:javax.inject:1'    	
      			,'org.aspectj:aspectjrt:1.8.7'
      			,'org.aspectj:aspectjweaver:1.8.7'		
      			,'org.reflections:reflections:0.9.10'		
      			,'commons-dbcp:commons-dbcp:1.4'      
         )
         
  // utils
	compile group: 'com.google.code.gson', name: 'gson', version: '2.7'        
	compile group: 'org.apache.commons', name: 'commons-csv', version: '1.4'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'   
	compile group: 'log4j', name: 'log4j', version: '1.2.17'	  

	//HTTP server for data communication
  compile group: 'com.sparkjava', name: 'spark-core', version: '2.5.4'
	
  // common database drivers
  compile group: 'redis.clients', name: 'jedis', version: '2.9.0'    
  compile group: 'mysql', name: 'mysql-connector-java', version: '6.0.5'
  compile group: 'org.postgresql', name: 'postgresql', version: '9.4.1212'
  compile group: 'org.mongodb', name: 'mongo-java-driver', version: '3.4.0'

  //ORM database
  compile group: 'org.mongodb.morphia', name: 'morphia', version: '1.3.0'

	//Spring Core framework and JDBC for RDBMS
	compile group: 'org.springframework', name: 'spring-context', version: '4.3.4.RELEASE'
	compile group: 'org.springframework', name: 'spring-aop', version: '4.3.4.RELEASE'
	compile group: 'org.springframework', name: 'spring-jdbc', version: '4.3.4.RELEASE'
	
	// HTTP Client 
	compile group: 'com.ning', name: 'async-http-client', version: '1.9.40'
	
}

def getClasspathStringJars() {
	def baseFolder = 'deps/'
    def fileNames = []
    configurations.compile.each { File file -> fileNames.add(baseFolder + file.name) }
    
    def classpath = fileNames.join(" ; ")    
    return '. ; ' + classpath + ' ; '
}

// copy dependency libs
task CopyRuntimeLibs(type: Copy) {  
  into "BUILD-OUTPUT/deps"  
  from configurations.compile  
}

// copy configs
task CopyConfigs(type: Copy) {  
  into "BUILD-OUTPUT/configs"  
  from files('configs')
}

// copy shell-scripts
task CopyShellScripts(type: Copy) {  
  into "BUILD-OUTPUT"  
  from files('shell-scripts')
}

task BuildDataJob(type: Jar) {	
	dependsOn classes   
    from(sourceSets.main.output) {
        include "**"
    }
    version = '1.0'
    baseName = 'rfx-data-job'
    manifest {
   		attributes ('Implementation-Title': 'RfxDataJob', 
        			'Implementation-Version': version ,
        			'Main-Class': 'com.rfxlab.datajob.DataJobInstance',
        			'Class-Path' : getClasspathStringJars() 
        			)
	}
}